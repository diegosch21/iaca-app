@mixin boton-punta($height) {
	.contenedor-con-punta {
		@include x-rem(height,$height);
		position: relative;
		.punta--derecha, .punta--izquierda {
			position: absolute;
			width: 0px;
			height: 0px;
			top: 0;
			border-style: solid;
			@include x-rem(border-top-width,$height/2);
			@include x-rem(border-bottom-width,$height/2);
			border-top-color: transparent;
			border-bottom-color: transparent;
		}
		.punta--derecha {
			@include x-rem(border-left-width,$height/3);
			@include x-rem(right,-$height/3);
			border-right-color: transparent;
			//color de la punta: border left con el color definido en _base.scss
		}
		.punta--izquierda {
			@include x-rem(border-right-width,$height/3);
			@include x-rem(left,-$height/3);
			border-left-color: transparent;
			//color de la punta: border right con el color definido en _base.scss
		}
	}
}
@mixin boton-punta-correccion-alto($height) {
	@include boton-punta($height);
	.contenedor-con-punta {
		.punta--derecha, .punta--izquierda {
			@include x-rem(top,-0.5);
			@include x-rem(border-top-width,$height/2 + 0.5);
			@include x-rem(border-bottom-width,$height/2 + 0.5);
		}
	}
}
@mixin boton-punta-correccion-costado($height) {
	@include boton-punta($height);
	.contenedor-con-punta {
		.punta--derecha {
			@include x-rem(right,-$height/3 - 0.1);
		}
		.punta--izquierda {
			@include x-rem(left,-$height/3 - 0.1);
		}
	}
}

@mixin header-banner-punta($height,$width){

	.contenedor-con-punta {
		@include x-rem(height,$height);
		position: relative;
		.punta--derecha{
			position: absolute;
			width: 0px;
			height: 0px;
			top: 0;
			border-style: solid;
			@include x-rem(border-top-width,$height/2);
			@include x-rem(border-bottom-width,$height/2);
			@include x-rem(border-left-width,$height/4);
			@include x-rem(right,-$height/4-0.2);
			border-right-color: transparent;
			border-top-color: transparent;
			border-bottom-color: transparent;
		}
	}

    .header--banner{
      	@include x-rem(width, $width);
      	@include x-rem(margin-right, 1.5);
      	@include x-rem(padding, 1.25 0);
    }
}

@mixin boton-activo($color) {
	&.activo, 
	html.no-touch &:hover {
		.header--banner, .contenedor-con-punta {
			@extend .contenedor--#{$color};
			.punta--izquierda, .punta--derecha {
				@extend .punta--#{$color};
				border-top-color: transparent;
				border-bottom-color: transparent;
			}
			.punta--izquierda {
				border-left-color: transparent;
			}
			.punta--derecha {
				border-right-color: transparent;
			}
		}
		.contenido--banner {
			span {
				@extend .texto-#{$color};
			}
		}
	}
}



//
//a small mixin for easy use of rem with px as fallback
//usage: @include x-rem(font-size, 14px)
//usage: @include x-rem(marign, 0 12px 2 1.2)
//usage: @include x-rem(padding, 1.5 24px)
//
//thanks to Eric Meyer for https://github.com/ericam/susy
//and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
//
@mixin x-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px !global; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}